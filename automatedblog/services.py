import logging
from datetime import datetime
from typing import Tuple, List
from automatedblog.models import Topic
from automatedblog import generators

logger = logging.getLogger(__name__)


def check_topic_if_does_exist(title: str) -> True | False:
    """Check if the topic with the given title exists"""
    logger.info(f'If topic already exists: {Topic.objects.filter(topic=title).exists()}')
    return Topic.objects.filter(topic=title).exists()


def save_topic_to_db(topics: List[Tuple]) -> None:
    """Save topic from the content plan to the database"""
    try:
        for date, title in topics:
            if check_topic_if_does_exist(title):
                title = generators.generate_new_extra_topic(title)
            new_topic = Topic(date=date, topic=title)
            new_topic.save()
            logger.info(f'Topic successfully saved to db, len: {len(new_topic.body)} symbols')
    except Exception as e:
        logger.error('An error occurred during saving topic to db: %s', str(e), exc_info=True)


def get_topics_till_today() -> Topic:
    today = datetime.today()
    return Topic.objects.filter(date__lte=today).all()


def get_topic_for_today(today: str) -> Topic:
    """Get Topic corresponding to today's date"""
    return Topic.objects.filter(date=today).first()


def save_article_to_db(topic: Topic, generated_article: str) -> None:
    """Add article to Topic"""
    try:
        topic.body = generated_article
        topic.save()
        logger.info(f'Article successfully saved to db: {topic.body[:-10]}')
    except Exception as e:
        topic.body = "Упс, сегодня у контент-менеджера выходной"
        logger.error('An error occurred during article generation: %s', str(e), exc_info=True)


def save_image_to_db(topic: Topic, generated_image_url: str) -> None:
    """Add image to Topic"""
    try:
        topic.picture = generated_image_url
        topic.save()
        logger.info(f'Image successfully saved to db: {topic.picture}')
    except Exception as e:
        logger.error('An error occurred during saving image to db: %s', str(e), exc_info=True)


def check_if_any_topic_exists_for_this_month(date: datetime) -> List[Topic]:
    """Find existent topics for current month that might have been generated due to ai not clear response"""
    year = date.year
    month = date.month
    if month == 12:
        end_year = year + 1
        end_month = 1
    else:
        end_year = year
        end_month = month + 1
    start_date = datetime(year, month, 1)
    end_date = datetime(end_year, end_month, 1)
    result = Topic.objects.filter(date__gte=start_date, date__lt=end_date)
    logger.info(f'If any topics already exists for current month: {result}')
    return result


def remove_out_of_plan_topics(topics: List[Topic]) -> None:
    """Removing topics generated by improper ai response"""
    try:
        Topic.objects.filter(id__in=[t.id for t in topics]).delete()
    except Exception as e:
        logger.error('An error occurred during removing topics: %s', str(e), exc_info=True)

